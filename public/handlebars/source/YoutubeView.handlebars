<pre><code><span class="comment">/*
This class is responsible for loading the youtubeplayer api
and spawning an instance of a ytplayer object
It listens to changes on its controller's attributes to 
affect the ytplayer object
*/</span>
App.YoutubeView = Ember.View.extend({

  iframeId: <span class="string">"ytplayer"</span>,
  classNames: [<span class="string">'fixedplayer'</span>],

  <span class="comment">//called before this element is to be inserted into the DOM</span>
  didInsertElement: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> self = <span class="keyword">this</span>
      , $window = Ember.$(window);

    <span class="keyword">this</span>.createYoutubePlayer();

    <span class="comment">//set jquery event to handle window resize</span>
    $window.resize(self.resizeListener.bind(self));
   
    <span class="comment">//call once to set correct size </span>
    self.resizeListener();
  },

  <span class="comment">//called when view is being removed</span>
  willDestroyElement: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> $window = Ember.$(window);

    <span class="comment">//nullify the ytplayer instance</span>
    <span class="keyword">this</span>.set(<span class="string">'ytplayer'</span>, <span class="literal">null</span>);
    
    <span class="comment">//remove jquery listener</span>
    $window.unbind(<span class="string">'resize'</span>, <span class="keyword">this</span>.resizeListener);    
    
  },

  <span class="comment">//this function responds to window resize</span>
  resizeListener: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> ytplayer = <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>)
      , height
      , width;

    <span class="keyword">if</span> (!ytplayer) { <span class="keyword">return</span>; }
    
    width = $(window).width() * (<span class="number">4</span>/<span class="number">12</span>);
    height = width * (<span class="number">480</span>/<span class="number">640</span>);
    ytplayer.setSize(width, height); 
  },

  <span class="comment">//when we insert the element, we add our YT player object</span>
  createYoutubePlayer: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> ytController = <span class="keyword">this</span>.get(<span class="string">'controller'</span>);

    <span class="comment">//do we have a youtube video model to load?</span>
    <span class="keyword">if</span> (!ytController.get(<span class="string">'model'</span>)) { <span class="keyword">return</span>; }
    <span class="keyword">var</span> model = ytController.get(<span class="string">'model'</span>)
      , iframeId = <span class="keyword">this</span>.get(<span class="string">'iframeId'</span>)
      , iframe = document.getElementById(iframeId);

    <span class="keyword">var</span> yt = <span class="keyword">new</span> YT.Player(iframe, {
      events: {
        onReady: <span class="keyword">this</span>.sendStateChange.bind(<span class="keyword">this</span>),
        onStateChange: <span class="keyword">this</span>.sendStateChange.bind(<span class="keyword">this</span>),
        onError: <span class="keyword">this</span>.handleError.bind(<span class="keyword">this</span>),
      }, 
    });
  
    <span class="keyword">this</span>.set(<span class="string">'ytplayer'</span>, yt);

  },

  
  <span class="comment">/*
  this handles state-change events emitted by the player
  these are useful to control for the user changing the state
  of your player directly through the player UI
  we broadcast to the controller our new state so that the controller
  may optionally respond
  */</span>
  sendStateChange: <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> {</span>
    <span class="keyword">var</span> state = event.data
      , ytController = <span class="keyword">this</span>.get(<span class="string">'controller'</span>); 

    ytController._updateState(state);
  },

  handleError: <span class="keyword">function</span>(event) {
    <span class="keyword">var</span> ytController = <span class="keyword">this</span>.get(<span class="string">'controller'</span>);
    alert(<span class="string">'an error occurred with that video'</span>);
  },


  <span class="comment">/*
  Here we define a ton of observers that react to changes in the controller's
  model and update the ytplayer object for this view accordingly.
  */</span>

  <span class="comment">//we observe the state of the controller and determine our view's response</span>
  <span class="comment">//by default, the view and controller's state are linked</span>
  stateHasChanged: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> actionMapping = {
      <span class="number">1</span>: <span class="string">'playVideo'</span>,
      <span class="number">2</span>: <span class="string">'pauseVideo'</span>,
    } 
    <span class="keyword">var</span> state = <span class="keyword">this</span>.get(<span class="string">'controller._playerState'</span>),
      action = actionMapping[state],
      ytplayer = <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>);

    <span class="comment">//sanity checking</span>
    <span class="keyword">if</span> (!ytplayer) { <span class="keyword">return</span>; }
    <span class="keyword">if</span> (!action) { <span class="keyword">return</span>; }        
    
    <span class="comment">//call the appropriate behavior on the youtube player</span>
    ytplayer[action]();
  }.observes(<span class="string">'controller._playerState'</span>),

  
  dimensionsHaveChanged: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> ytplayer = <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>)
      controller = <span class="keyword">this</span>.get(<span class="string">'controller'</span>)
      height = controller.get(<span class="string">'model.height'</span>)
      width = controller.get(<span class="string">'model.width'</span>);
    
    <span class="keyword">if</span> (!ytplayer) { <span class="keyword">return</span>; }    

    <span class="comment">//player must be atleast 200x200 and not larger than window</span>
    width = (width &lt; <span class="number">200</span>) ? <span class="number">200</span> : width;
    width = (width &gt; window.width) ? window.width : width;
    height = (height &lt; <span class="number">200</span>) ? <span class="number">200</span> : height;
    height = (height &gt; window.height) ? window.height : height;

    ytplayer.setSize(width, height);
  }.observes(<span class="string">'controller.model.height'</span>, <span class="string">'controller.model.width'</span>),


  videoHasChanged: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> ytplayer = <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>)
      , videoId = <span class="keyword">this</span>.get(<span class="string">'controller.videoId'</span>);

    <span class="keyword">if</span> (!ytplayer) { <span class="keyword">return</span>; }

    <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>).cueVideoById(videoId);
  }.observes(<span class="string">'controller.videoId'</span>),  
  

  <span class="comment">//for the moment, if these settings change we create a new yt player</span>
  settingsHaveChanged: <span class="keyword">function</span>() {
    <span class="keyword">var</span> ytplayer = <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>);
    
    <span class="keyword">if</span> (!ytplayer) { <span class="keyword">return</span>; }  
  
    <span class="keyword">this</span>.createYoutubePlayer(); 
  }.observes( <span class="string">'controller.model.autohide'</span>, <span class="string">'controller.model.autoplay'</span>,
              <span class="string">'controller.model.controls'</span>, <span class="string">'controller.model.disablekb'</span>,
              <span class="string">'controller.model.enablejsapi'</span>, <span class="string">'controller.model.fs'</span>,
              <span class="string">'controller.model.iv_load_policy'</span>, 
              <span class="string">'controller.model.modestbranding'</span>,
              <span class="string">'controller.model.rel'</span>, <span class="string">'controller.model.showinfo'</span> ),


  volumeHasChanged: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> ytplayer = <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>)
      , volume = <span class="keyword">this</span>.get(<span class="string">'controller.volume'</span>);

    <span class="keyword">if</span> (!ytplayer) { <span class="keyword">return</span>; }

    <span class="comment">//volume must be between 0 and 100</span>
    volume = (volume &lt; <span class="number">0</span>) ? <span class="number">0</span> : volume;
    volume = (volume &gt; <span class="number">100</span>) ? <span class="number">100</span> : volume;
  
    ytplayer.setVolume(volume);
  }.observes(<span class="string">'controller.volume'</span>),


  muteHasChanged: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> ytplayer = <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>)
      , isMuted = <span class="keyword">this</span>.get(<span class="string">'controller.isMuted'</span>);

    <span class="keyword">if</span> (!ytplayer) { <span class="keyword">return</span>; }

    <span class="keyword">if</span> (isMuted) { ytplayer.mute(); }
    <span class="keyword">else</span> { ytplayer.unMute(); }
  }.observes(<span class="string">'controller.isMuted'</span>),

  seekPositionHasChanged: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="keyword">var</span> ytplayer = <span class="keyword">this</span>.get(<span class="string">'ytplayer'</span>)
      , seekPosition = <span class="keyword">this</span>.get(<span class="string">'controller.seekPosition'</span>);

    <span class="keyword">if</span> (!ytplayer) { <span class="keyword">return</span>; }

    ytplayer.seekTo(seekPosition, <span class="literal">true</span>); 
  }.observes(<span class="string">'controller.seekPosition'</span>),

});
</code></pre>